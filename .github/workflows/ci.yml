name: CI
on:
  push:
    branches:
      - '**'
      - '!ws-iac-scan-results/**'
      - '!whitesource-remediate/master-all**'
      - '!whitesource/migrate-configuration**'
    tags:
      - '*'
  schedule:
    - cron: '0 4 * * *'
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      TOOL_NAME: ws_copy_policy
      PYTHON_VERSION: ${{ matrix.python-version }}"
    strategy:
      matrix:
        python-version: ['3.9', '3.10' , '3.11']
    steps:
      - name: Set Environment Variables
        run: |
          echo "VERSION=0.0.0.ci0" >> $GITHUB_ENV
          echo "RELEASE=false" >> $GITHUB_ENV
          echo "TOOL_DIR=$TOOL_NAME" >> $GITHUB_ENV
          if [[ "$GITHUB_REF" == *"refs/tags/v"* || "$GITHUB_REF" == *"refs/tags/test-v"* ]]; then
            echo "VERSION=$(echo ${{github.ref}} |  sed -r 's/^[\/a-zA-z-]+//')" >> $GITHUB_ENV
            if [[ $VERSION != *@(a|b)* ]]; then
              echo "RELEASE=true" >> $GITHUB_ENV
            fi
          fi
      - uses: actions/checkout@v2
      - name: Set package version
        run: |
          sed -E -i  "s/^__version__ = \"[a-z0-9\.]+\"/__version__ = \"$VERSION\"/g"  ${{ env.TOOL_DIR }}/_version.py
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 wheel
          pip install -r requirements.txt
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --ignore=E501,F841
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Create Wheel Package
        run: python setup.py bdist_wheel
      - name: Install Wheel package
        run: pip install dist/${{ env.TOOL_DIR }}-${{ env.VERSION }}-py3-none-any.whl
      - name: Copy whl
        run: |
          mkdir dist/${{ env.PYTHON_VERSION }}
          cp dist/${{ env.TOOL_DIR }}-${{ env.VERSION }}-py3-none-any.whl dist/${{ env.PYTHON_VERSION }}/
#      - uses: actions/upload-artifact@v3
#        with:
#          path: dist/${{ env.PYTHON_VERSION }}/${{ env.TOOL_DIR }}-${{ env.VERSION }}-py3-none-any.whl
      - name: Cache whl
        uses: actions/cache@v3
        with:
          path: dist/${{ env.PYTHON_VERSION }}/${{ env.TOOL_DIR }}-${{ env.VERSION }}-py3-none-any.whl
          key: ${{ env.PYTHON_VERSION }}_${{ env.TOOL_DIR }}_${{ github.run_id }}
  publish:
    if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/staging'
    needs: [build-and-test]
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
      - name: Restore whl
        uses: actions/cache@v3
        with:
          path: dist/${{ env.PYTHON_VERSION }}/${{ env.TOOL_DIR }}-${{ env.VERSION }}-py3-none-any.whl
          key: ${{ env.PYTHON_VERSION }}_${{ env.TOOL_DIR }}_${{ github.run_id }}
      - name: Upload to S3 bucket
        env:
          GIT_USER: ${{ github.actor }}
          BRANCH: ${{ github.head_ref }}
          COMMIT_ID: ${{ github.sha }}
        if: github.ref == 'refs/heads/staging' && ${{ env.PYTHON_VERSION }}==3.9
        run: |
          TIMESTAMP=$(date +"%Y-%m-%d_%H-%M")
          aws s3 cp dist/${{ env.PYTHON_VERSION }}/${{ env.TOOL_DIR }}-${{ env.VERSION }}-py3-none-any.whl s3://mend-ps-staging/${{ env.TOOL_DIR }}/"$TIMESTAMP"_${{ env.TOOL_NAME }}.whl
          aws s3api put-object-tagging --bucket mend-ps-staging --key ${{ env.TOOL_DIR }}/"$TIMESTAMP"_${{ env.TOOL_NAME }}.whl --tagging "{\"TagSet\": [{\"Key\": \"User\", \"Value\": \"$GIT_USER\"},{\"Key\": \"Branch\", \"Value\": \"$BRANCH\"},{\"Key\": \"CommitId\", \"Value\": \"$COMMIT_ID\"}]}"
      - name: Publish to PyPI
        if: startsWith(github.ref, 'refs/tags/v')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip_existing: true
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          artifacts: dist/${{ env.TOOL_DIR }}-${{ env.VERSION }}-py3-none-any.whl
          prerelease: ${{ env.RELEASE != 'true' }}
          generateReleaseNotes: true
      - name: Publish to Confluence - Public
        if: startsWith(github.ref, 'refs/tags/v')
        uses: cupcakearmy/confluence-markdown-sync@v1
        with:
          from: README.md
          to: 2225406280
          cloud: whitesource
          user: ${{ secrets.CONFLUENCE_USER }}
          token: ${{ secrets.CONFLUENCE_TOKEN }}
      - name: Publish to Confluence - Internal
        if: startsWith(github.ref, 'refs/tags/v')
        uses: cupcakearmy/confluence-markdown-sync@v1
        with:
          from: README.md
          to: 2313290370
          cloud: whitesource
          user: ${{ secrets.CONFLUENCE_USER }}
          token: ${{ secrets.CONFLUENCE_TOKEN }}